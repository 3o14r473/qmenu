#!/bin/bash

fqvm_preferences() {

 local property=0

 while [ -n "$property" ]; do

   local property=`qvm-prefs $target_qube |\
     dmenu -l 45 -p "$target_qube:" $dmenu_fmc |\
     awk '{ print $1 }'`

   if [ -n "$property" ]; then

     case $property in       

       autostart) 
       
         local value_selected=`printf "False\nTrue" |\
           dmenu -i -p "Set autostart of $target_qube to:" $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       debug) 
       
         local value_selected=`printf "False\nTrue" |\
           dmenu -i -p "Set debug mode of $target_qube to:" $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       default_dispvm) 
          
         if [ -n "${LIST_OF_DISPTEMP}" ]; then unset LIST_OF_DISPTEMP; fi 

         # [mediocre] Look up disposable templates.
         for n in `qvm-ls --no-spinner --raw-data -O NAME,FLAGS |\
           grep '|a.......$' | cut -d '|' -f1`; do

           if `qvm-prefs --get $n template_for_dispvms |\
             grep True &>/dev/null`; then

             local LIST_OF_DISPTEMP+="\n"$n
           fi
         done 

         local value_selected=`printf "(Default)\n(None)${LIST_OF_DISPTEMP[*]}" |\
           dmenu -l 50 -p "Select default dispvm for $target_qube" $dmenu_fmc`

         if [ "$value_selected" = "(None)" ]; then 
                        
           local value_selected="None"

         elif [ "$value_selected" = "(Default)" ]; then

           local value_selected="--default"
         fi

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       default_user)

         local value_selected=`echo "--default" |\
           dmenu -p "Enter the name of the default user for $target_qube"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;
       
       
       include_in_backups) 
       
         local value_selected=`printf "False\nTrue" |\
           dmenu -i -p "Include $target_qube in backups?" $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       kernel) 
       
         local value_selected=`echo "--default" |\
           dmenu -p "Enter kernel to be used by $target_qube" $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set kernel of $target_qube to $value_selected?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then
                            
             qvm-prefs --set $target_qube $property "$value_selected"
           fi
         fi;;


       kernelopts) 
           
         local value_selected=`echo "--default" |\
           dmenu -p "Enter kernel options for $target_qube" $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set kernel options for $target_qube to \"$value_selected\"?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
                              
             qvm-prefs --set $target_qube $property "$value_selected"
           fi
         fi;;


       label) 
       
         if qvm-check --running $target_qube &>/dev/null; then

           echo "Go back..." |\
             dmenu -p "$target_qube needs to be powered off, in order to change its label"\
             $dmenu_fmc &>/dev/null 
         else
           
           local value_selected=`printf "Purple\nBlue\nGreen\nYellow\nOrange\nRed\nGray\nBlack" |\
             dmenu -i -l 8 -p "Select label for $target_qube" $dmenu_fmc`

           if [ -n "$value_selected" ]; then

             qvm-prefs --set $target_qube $property ${value_selected,}

             qube_label=`qvm-ls $target_qube -O LABEL | sed -e '1d'`

             correct_qube_label

             dmenu_fmc="-f -m 0 -nb $theme_0 -nf $theme_1 -sb $qube_label -sf $theme_1"
           fi
         fi;;


       mac) 
           
         local value_selected=`echo "--default" |\
           dmenu -p "Enter new MAC address for $target_qube" $dmenu_fmc` 

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set MAC address of $target_qube to $value_selected?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
                              
             if ! qvm-prefs --set $target_qube $property $value_selected; then

               echo "Go back..." |\
                 dmenu -p "Error: Could not set MAC address to '$value_selected'!"\
                 $dmenu_fmc &>/dev/null
             fi
           fi
         fi;;


       maxmem) 
       
         local value_selected=`echo "--default" |\
           dmenu -p "Enter the maximum amount of memory in MB to be allocated to $target_qube. Setting it to 0 will disable dynamic memory balancing."\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set maximum memory of $target_qube to $value_selected MB?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
               
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       memory) 
           
         local value_selected=`echo "--default" |\
           dmenu -p "Enter the amount of initial memory in MB to be allocated to $target_qube"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set initial memory of $target_qube to $value_selected MB?" $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then
              
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       netvm) 
         
         # List netvm's via 'qvm-ls'.
         local value_selected=`printf "(Default)\n(None)\n$(qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
           grep '|...N....$' | cut -d '|' -f1)" |\
           dmenu -l 50 -p "Select netvm for $target_qube" $dmenu_fmc`

         if [ "$value_selected" = "(None)" ]; then 
                          
           local value_selected="None"

         elif [ "$value_selected" = "(Default)" ]; then

           local value_selected="--default"
         fi

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       provides_network) 
           
         local value_selected=`printf "False\nTrue" |\
           dmenu -i -p "Should $target_qube provide networking for other qubes?"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       qrexec_timeout) 
      
         local value_selected=`echo "--default" |\
           dmenu -p "Enter the time in seconds, after which qrexec attempt is deemed a failure for $target_qube"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set qrexec timeout for $target_qube to $value_selected seconds?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
                            
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       shutdown_timeout) 
        
         local value_selected=`echo "--default" |\
           dmenu -p "Enter the time in seconds for shutdown, after which $target_qube may be forcefully powered off"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set shutdown timeout for $target_qube to $value_selected seconds?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
                            
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       template) 
       
         if qvm-check --running $target_qube &>/dev/null; then

           echo "Go back..." |\
             dmenu -p "$target_qube needs to be powered off, in order to change its template"\
             $dmenu_fmc &>/dev/null 
         else

           # List templatevm's via 'qvm-ls'.
           local value_selected=`printf "(Default)\n$(qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
             grep '|t.......$' | cut -d '|' -f1)" |\
             dmenu -l 50 -p "Select template for $target_qube" $dmenu_fmc`

           if [ "$value_selected" = "(Default)" ]; then

             local value_selected="--default"
           fi

           if [ -n "$value_selected" ]; then 
                              
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       template_for_dispvms) 
           
         local value_selected=`printf "False\nTrue" |\
           dmenu -i -p "Should $target_qube be used as a template for disposable qubes?"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                            
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       vcpus) 
       
         local value_selected=`echo "--default" |\
           dmenu -p "Enter the number of CPU cores that should be made available to $target_qube"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then

           local answer_selected=`printf "No\nYes" |\
             dmenu -i -p "Set number of CPU cores available to $target_qube to $value_selected?"\
             $dmenu_fmc`

           if [ "$answer_selected" = "Yes" ]; then 
                          
             qvm-prefs --set $target_qube $property $value_selected
           fi
         fi;;


       virt_mode) 
           
         local value_selected=`printf "PVH\nHVM\nPV" |\
           dmenu -i -l 3 -p "Select virtualisation mode for $target_qube"\
           $dmenu_fmc`

         if [ -n "$value_selected" ]; then 
                          
           qvm-prefs --set $target_qube $property $value_selected; fi;;


       *)
     esac
   fi
 done
}


fqvm_pci() {
 
 if qvm-check --running $target_qube &>/dev/null; then 

   echo "Go back..." |\
     dmenu -p "$target_qube needs to be powered off, in order to attach or detach PCI devices"\
     $dmenu_fmc &>/dev/null   
 else

   local list_pci=`qvm-pci`

   if ! qvm-prefs --get $target_qube maxmem | grep -w 0; then 
     
     local answer_memorybalancing=`printf "Continue anyways\nDisable dynamic memory balancing" |\
       dmenu -l 2 -i -p "Dynamic memory balancing is enabled in $target_qube, some devices might not work!"\
       $dmenu_fmc | awk '{ print $1 }'`

     if [ "$answer_memorybalancing" = "Disable" ]; then

       qvm-prefs --set $target_qube maxmem 0
     fi
   fi

   if qvm-prefs --get $target_qube virt_mode | grep -w pvh; then
     
     local answer_virtmode=`printf "Continue anyways\nSelect another virtualisation mode" |\
       dmenu -l 2 -i -p "$target_qube is using PVH for its virtualisation mode, which does not support PCI passthrough!"\
       $dmenu_fmc | awk '{ print $1 }'`

     if [ "$answer_virtmode" = "Select" ]; then

       local virtmode_selected=`printf "HVM\nPV" |\
         dmenu -l 2 -i -p "Select virtualisation mode for $target_qube" $dmenu_fmc` 

       if [ -n "$virtmode_selected" ]; then 
         
         qvm-prefs --set $target_qube virt_mode $virtmode_selected
       fi
     fi
   fi
     
   local device_selected=0

   while [ -n "$device_selected" ]; do
 
     local device_selected=`echo "$list_pci" |\
       dmenu -l 30 -p "$target_qube:" $dmenu_fmc`

     if [ -n "$device_selected" ]; then
 
       local device_src=`echo $device_selected | awk '{ print $1 }' | sed 's/:.*//'`
       local device_bdf=`echo $device_selected | awk '{ print $1 }' | sed 's/.*://'`
  
       if echo "$device_selected" | grep -w $target_qube; then
     
         local answer=`printf "No\nYes" |\
           dmenu -i -p "Detach \"$device_bdf\" from $target_qube?" $dmenu_fmc`

         if [ "$answer" = "Yes" ]; then

           if ! test_qvm-pci detach $target_qube $device_src:$device_bdf; then 

             echo "Go back..." |\
               dmenu -p "Error: Failed to detach \"$device_bdf\" from $target_qube!"\
               $dmenu_fmc &>/dev/null
           fi

           local list_pci=`qvm-pci`
         fi
       else

         local answer=`printf "No\nYes" |\
           dmenu -i -p "Attach \"$device_bdf\" to $target_qube?" $dmenu_fmc`

         if [ "$answer" = "Yes" ]; then
           
           # Check if there is more than one function
           # that belongs to the same device.
           local bdf_count=`echo "$list_pci" | awk '{ print $1 }' |\
             grep $(echo $device_bdf | sed 's/\..*//') | wc -l` 

           if [ "$bdf_count" -gt 1 ]; then 

             if [ -n "$pci_option" ]; then unset pci_option; fi

               local answer_nsrt=`printf "No\nYes" |\
               dmenu -i -p "\"$device_bdf\" is most likely to be attached with the option 'no-strict-reset' enabled. Please be aware of the security implications! Do you want to attach \"$device_bdf\" with the option 'no-strict-reset' set to true?"\
               $dmenu_fmc`

             if [ "$answer_nsrt" = "Yes" ]; then 
                 
               local pci_option="-o no-strict-reset=True"
             fi
           fi

           if ! qvm-pci attach --persistent $pci_option $target_qube $device_src:$device_bdf; then 

             echo "Go back..." |\
               dmenu -p "Error: Failed to attach \"$device_bdf\" to $target_qube!"\
               $dmenu_fmc &>/dev/null
           fi

           local list_pci=`qvm-pci`
         fi
       fi
     fi
   done
 fi
}


fqvm_firewall() {

 rule_selected=0        
        
 while [ -n "$rule_selected" ]; do
        
   local rule_selected=`qvm-firewall $target_qube list |\
     dmenu -l 50 -p "$target_qube:" $dmenu_fmc`

   local rulenumber_selected=`echo $rule_selected | awk '{ print $1 }'`

   if [ -n "$rule_selected" ]; then
         
     # This will equal "NO" if the user selects the top row,
     # instead of any existing rule.
     if [ "$rulenumber_selected" != "NO" ]; then 
            
       local option=`printf "Add new rule above rule $rulenumber_selected\nRemove rule $rulenumber_selected" |\
         dmenu -i -l 2 -p "$target_qube:" $dmenu_fmc | awk '{ print $1 }'`
     else
             
       local option="Add"
     fi

     if [ "$option" = "Remove" ]; then

       local answer=`printf "No\nYes" |\
         dmenu -i -p "Remove rule $rulenumber_selected?" $dmenu_fmc`

       if [ "$answer" = "Yes" ]; then 
           
         qvm-firewall $target_qube del --rule-no $rulenumber_selected
       fi

     elif [ "$option" = "Add" ]; then   
        
       if [ -n "${RULEARGS}" ]; then unset RULEARGS; fi

       local action=`printf "Accept\nDrop" |\
         dmenu -i -l 2 -p "Select action for the new firewall rule" $dmenu_fmc`
       
       local RULEARGS+="${action,,} "

       if [ -n "$action" ]; then 

         local specialtarget=`true |\
           dmenu -p "ACTION=${RULEARGS[*]} <specialtarget>" $dmenu_fmc`
             
         if [ -n "$specialtarget" ]; then 
                 
           local RULEARGS+="SPECIALTARGET=$specialtarget "
         fi
                
         local dsthost=`true |\
           dmenu -p "ACTION=${RULEARGS[*]} <dsthost>" $dmenu_fmc`
                 
         if [ -n "$dsthost" ]; then 
                 
           local RULEARGS+="DSTHOST=$dsthost "
         fi

         local proto=`true |\
           dmenu -p "ACTION=${RULEARGS[*]} <proto>" $dmenu_fmc`
                 
         if [ -n "$proto" ]; then 
               
           local RULEARGS+="PROTO=$proto "
         fi

         if [[ "$proto" =~ ^(tcp|udp)$ ]]; then

           local dstports=`true |\
             dmenu -p "ACTION=${RULEARGS[*]} <dstports>" $dmenu_fmc`
                     
           if [ -n "$dstports" ]; then
                  
             local RULEARGS+="DSTPORTS=$dstports "
           fi

         elif [ "$proto" = "icmp" ]; then

           local icmptype=`true |\
             dmenu -p "ACTION=${RULEARGS[*]} <icmptype>" $dmenu_fmc`
                     
           if [ -n "$icmptype" ]; then
                     
             local RULEARGS+="ICMPTYPE=$icmptype "
           fi
         fi

         local expire=`true |\
           dmenu -p "ACTION=${RULEARGS[*]} <expire>" $dmenu_fmc`
             
         if [ -n "$expire" ]; then
               
           local RULEARGS+="EXPIRE=$expire "
         fi

         local comment=`true |\
           dmenu -p "ACTION=${RULEARGS[*]} <comment>" $dmenu_fmc`
                 
         if [ -n "$comment" ]; then
               
           local RULEARGS+="COMMENT=$comment"
         fi
        
         local answer=`printf "No\nYes" |\
           dmenu -i -p "Add the following rule to $target_qube? {{ ACTION=${RULEARGS[*]} }}"\
           $dmenu_fmc` 

         if [ "$answer" = "Yes" ]; then

           if [ -n "$beforerule" ]; then unset beforerule; fi

           if [ "$rulenumber_selected" != "NO" ]; then 
                         
             local beforerule=`echo --before $rulenumber_selected`
           fi

           if ! qvm-firewall $target_qube add $beforerule ${RULEARGS[*],,}; then

             echo "Go back..." | dmenu -i $dmenu_fmc\
               -p "Error: Failed to add firewall rule! See 'qvm-firewall --help' for more information."\
               &>/dev/null
           fi
         fi
       fi
     fi
   fi
 done
}


fqvm_devices() {

 if ! qvm-check --running $target_qube &>/dev/null; then 

   echo "Go back..." |\
     dmenu -p "$target_qube needs to be running, in order to attach devices"\
     $dmenu_fmc &>/dev/null 
 else

   # Depending on the device type, we have to 
   # 'awk' different fields later on.
   if [ "$chosefrom" = "Audio" ]; then

     local device_type="device mic"
  
     local awk_devicename0=2
     local awk_devicename1=10
     local awk_targetqube=3

   elif [ "$chosefrom" = "Block" ]; then

     local device_type="${chosefrom,}"

     local awk_devicename0=2
     local awk_devicename1=3
     local awk_targetqube=4

   elif [ "$chosefrom" = "USB" ]; then

     local device_type="${chosefrom,,}"

     local awk_devicename0=2
     local awk_devicename1=10
     local awk_targetqube=3
   fi
    
   local devices_list=`qvm-$device_type`

   local device=`echo "$devices_list" |\
     dmenu -l 16 -p "$target_qube:" $dmenu_fmc`

   local device_id=`echo $device | awk '{ print $1 }'`

   local device_name=`echo $device |\
     awk '{ print $'$awk_devicename0'$'$awk_devicename1' }'`

   if [ -n "$device" ]; then

     local holds_qube=`echo "$devices_list" | grep $device_id |\
       awk '{ print $'$awk_targetqube' }'`

     if [ -z "$holds_qube" ]; then 

       local answer=`printf "No\nYes" |\
         dmenu -i -p "Attach $device_name to $target_qube?"\
         $dmenu_fmc`
    
       if [ "$answer" = "Yes" ]; then

         qvm-$device_type attach $target_qube $device_id&
       fi 

     elif [ "$holds_qube" = "$target_qube" ]; then 

       local answer=`printf "No\nYes" |\
         dmenu -i -p "Detach $device_name from $target_qube?"\
         $dmenu_fmc`
    
       if [ "$answer" = "Yes" ]; then

         qvm-$device_type detach $holds_qube $device_id&
       fi
     else
   
       local answer=`printf "No\nYes" |\
         dmenu -i -p "Detach $device_name from $holds_qube and attach it to $target_qube?"\
         $dmenu_fmc`
    
       if [ "$answer" = "Yes" ]; then

         $(qvm-$device_type detach $holds_qube $device_id &&
           qvm-$device_type attach $target_qube $device_id)&
       fi
     fi
   fi
 fi
}


fqvm_applications() {

 local option=0 
 
 while [ -n "$option" ]; do
        
   local option=`printf "Add\nRemove" |\
     dmenu -i -l 2 -p "$target_qube:" $dmenu_fmc`

   if [ "$option" = "Add" ]; then  

     local template=`qvm-prefs $target_qube template`

     local application=0

     while [ -n "$application" ]; do
             
       # Only show applications that arent already selected for $target_qube via 'grep -v'.
       local application=`qvm-appmenus --get-available --i-understand-format-is-unstable $target_qube |\
         grep -v "$(qvm-appmenus --get-whitelist --i-understand-format-is-unstable $target_qube)" |\
         dmenu -l 50 -p "$target_qube:" $dmenu_fmc | awk '{ print $1 }'`
             
       if [ -n "$application" ]; then
        
         # Check validity of input.
         if qvm-appmenus --get-available --i-understand-format-is-unstable $target_qube |\
           awk '{ print $1 }' | grep -w $application; then

           printf "\n$application" >> $HOME/.local/share/qubes-appmenus/$target_qube/whitelisted-appmenus.list
         
           local applications_modified=1
         fi
       fi
     done         
 
   elif [ "$option" = "Remove" ]; then 

     local application=0

     while [ -n "$application" ]; do

       # Show complete application and .desktop names via 'grep'.
       local application=`qvm-appmenus --get-available --i-understand-format-is-unstable $target_qube |\
         grep "$(qvm-appmenus --get-whitelist --i-understand-format-is-unstable $target_qube)" |\
         dmenu -l 50 -p "$target_qube:" $dmenu_fmc | awk '{ print $1 }'`

       if [ -n "$application" ]; then

         # Look up linenumber above $application in /whitelisted-appmenus.list and delete whitespace.
         local whitespace_app=`cat $HOME/.local/share/qubes-appmenus/$target_qube/whitelisted-appmenus.list |\
           grep -n $application | cut -c 1`

         local whitespace_app=$((whitespace_app - 1))

         sed -i "${whitespace_app}{/^$/d;}" $HOME/.local/share/qubes-appmenus/$target_qube/whitelisted-appmenus.list
         sed -i "/$application/d" $HOME/.local/share/qubes-appmenus/$target_qube/whitelisted-appmenus.list

         local applications_modified=1
       fi
     done       
   fi
 
   if [ -n "$applications_modified" ]; then 
             
     qvm-appmenus --update $target_qube
         
     unset applications_modified 
   fi
 done
}


fqvm_service() {

 local service=0
 
 while [ -n "$service" ]; do
        
   local service=`qvm-service $target_qube --list |\
     dmenu -l 32 -p "$target_qube:" $dmenu_fmc | awk '{ print $1 }'`

   if [ -n "$service" ]; then

     # If the service has already been added to the list,
     # give option to unset it.
     if qvm-service $target_qube --list | grep -w $service; then
         
       local unset="\nUnset"
     fi
         
     local value=`printf "Disable\nEnable$unset" |\
       dmenu -l 3 -i -p "Select value for '$service'" $dmenu_fmc`
     
     if [ "$value" = "Disable" ]; then

       if ! qvm-service $target_qube $service off; then
        
         echo "Go back..." | dmenu -p "Error: Could not deactivate $service!"\
           $dmenu_fmc &>/dev/null
       fi
     
     elif [ "$value" = "Enable" ]; then

       if ! qvm-service $target_qube $service on; then
        
         echo "Go back..." | dmenu -p "Error: Could not activate $service!"\
           $dmenu_fmc &>/dev/null
       fi

     elif [ "$value" = "Unset" ]; then

       if ! qvm-service $target_qube $service --unset; then
        
         echo "Go back..." | dmenu -p "Error: Could not unset $service!"\
           $dmenu_fmc &>/dev/null
       fi
     fi

     if [ -n "$unset" ]; then unset unset; fi
   fi
 done
}


fqvm_disk() {
 
 # If $target_qube is template or standalone, give option to extend root storage.
 if [[ "$(qvm-ls -O flags $target_qube | sed '2q;d' | cut -c 1)" =~ ^(t|S)$ ]]; then

   local volume=`printf "Root\nPrivate" |\
     dmenu -l 2 -i -p "$target_qube:" $dmenu_fmc`
   
   local volume="${volume,}"
 else

   local volume="private"
 fi

 if [ -n "$volume" ]; then

   local current_storage=$(( $(qvm-volume info $target_qube:$volume size) / 1024/1024 ))

   local mebibyte=`echo "$current_storage" |\
     dmenu -p "Enter the maximum size of $volume storage in MiB to be allocated to $target_qube"\
     $dmenu_fmc`

   if [ -n "$mebibyte" ]; then 

     if [ "$mebibyte" -gt "$current_storage" ]; then 
             
       local byte=$(( $mebibyte * 1024*1024 ))

       local answer=`printf "No\nYes" |\
         dmenu -i -p "Increase the maximum $volume storage size of $target_qube from $current_storage MiB to $mebibyte MiB?"\
         $dmenu_fmc`

       if [ "$answer" = "Yes" ]; then
           
         qvm-volume extend $target_qube:$volume $byte&
       fi
     else 
             
       echo "Go back..." |\
         dmenu -p "Error: Can only increase the maximum $volume storage!"\
         $dmenu_fmc &>/dev/null
     fi
   fi
 fi
}


fqvm_keyboard() {
 
 # 'qmenu-vm' does not get informed about the installed layouts by the vm itself
 # so there is a chance that the selected layout is missing inside the vm.
 # Getting the info from the vm itself however would have security implications
 # so we will not switch to use that method.
 local LAYOUT+=$(ls /usr/share/X11/xkb/symbols |\
   dmenu -l 50 -p "$target_qube:" $dmenu_fmc)
 
 if [ -n "$LAYOUT" ]; then

   if test -d /usr/share/X11/xkb/symbols/$LAYOUT; then

     local LAYOUT+="/"$(ls /usr/share/X11/xkb/symbols/$LAYOUT |\
       dmenu -l 50 -p "$target_qube:" $dmenu_fmc)
   fi

   local answer=`printf "No\nYes" |\
     dmenu -i -p " Change the keyboard layout in $target_qube to '$LAYOUT'?"\
     $dmenu_fmc`

   if [ "$answer" = "Yes" ]; then

     if ! qvm-run $target_qube "setxkbmap $LAYOUT"; then

       echo "Go back..." |\
         dmenu -p "Error: Could not set keyboard layout to '$LAYOUT' in $target_qube! Please check the installed layouts inside the vm itself."\
         $dmenu_fmc &>/dev/null
     fi
   fi
 fi
}


fqvm_remove() {

 if qvm-check --running $target_qube &>/dev/null; then 

   echo "Go back..." |\
     dmenu -p "$target_qube needs to be powered off, in order to be removed"\
     $dmenu_fmc &>/dev/null 
 else
        
   local confirmation=`true |\
     dmenu -p "Enter the name of the qube '$target_qube' in order to remove it"\
     $dmenu_fmc`

   if [ "$target_qube" = "$confirmation" ]; then

     local confirmation_semifinal=`printf "No\nYes" |\
       dmenu -i -p "Are you sure you want to remove $target_qube permanently?"\
       $dmenu_fmc`

     if [ "$confirmation_semifinal" = "Yes" ]; then

       local confirmation_final=`printf "No\nYes" |
         dmenu -i -p "Are you really sure you want to remove $target_qube permanently?"\
         $dmenu_fmc`

       if [ "$confirmation_final" = "Yes" ]; then
         
         qvm-remove -f $target_qube&
       fi
     fi
   fi
 fi
}


fqvm_clone() {

 local clone_name=`true |\
   dmenu -p "Enter the name for the clone of $target_qube" $dmenu_fmc`

 if [ -n "$clone_name" ]; then

   local option=0
     
   while [ -n "$option" ]; do

     local option=`printf "Create the clone\nPool" |\
       dmenu -i -l 2 -p "$target_qube:" $dmenu_fmc | awk '{ print $1 }'`

     if [ "$option" = "Pool" ]; then

       local pool=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 10 -p "Select the pool to use for the new clone of $target_qube"\
         $dmenu_fmc | awk '{ print $1 }'`

       if [ -n "$pool" ]; then local pool="-P $pool"; fi
   
     elif [ "$option" = "Create" ]; then

       unset option
     
       qvm-clone $pool $target_qube $clone_name&
     fi
   done
 fi
}


fqvm_run() {

 local command=`true |\
   dmenu -p "Enter the command that is to be run in $target_qube" $dmenu_fmc`

 if [ -n "$command" ]; then qvm-run $target_qube $command& fi
}



# Change black, yellow and green to a more readable color if needed.
correct_qube_label() {

 if [ "$qube_label" = "black" ]; then

   qube_label='#373737'
 
 # Change only if dark theme is selected.
 elif [ "$theme_1" = "#ffffff" ]; then

   if [ "$qube_label" = "yellow" ]; then 
        
     qube_label='#cdcd00'
    
   elif [ "$qube_label" = "green" ]; then

     qube_label='#00b300'
   fi
 fi
}



fdom0_preferences() {

 local property=0

 while [ -n "$property" ]; do

   local property=`qubes-prefs |\
     dmenu -l 16 -p "Global Preferences:" $dmenu_d0 |\
     awk '{ print $1 }'`
                                                 
   case $property in 

     check_updates_vm)

       local value_selected=`printf "False\nTrue" |\
         dmenu -i -p "Should the system periodically check for domU updates?"\
         $dmenu_d0`

       if [ -n "$value_selected" ]; then

         qubes-prefs $property ${value_selected,}; fi;;


     clockvm)

       # List netvm's via 'qvm-ls'.
       local value_selected=`printf "$(qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
         grep '|...N....$' | cut -d '|' -f1)" |\
         dmenu -l 50 -p "Select new ClockVM" $dmenu_d0`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;
 

     default_dispvm)

       if [ -n "${LIST_OF_DISPTEMP}" ]; then unset LIST_OF_DISPTEMP; fi

       # [mediocre] Look up disposable templates.
       for n in `qvm-ls --no-spinner --raw-data -O NAME,FLAGS |\
         grep '|a.......$' | cut -d '|' -f1`; do

         if `qvm-prefs --get $n template_for_dispvms |\
           grep True &>/dev/null`; then

           LIST_OF_DISPTEMP+="\n"$n
         fi
       done 

       local value_selected=`printf "(None)${LIST_OF_DISPTEMP[*]}" |\
         dmenu -l 50 -p "Select default dispvm"\
         $dmenu_d0`

       if [ "$value_selected" = "(None)" ]; then 
       
         local value_selected="none"
       fi

       if [ -n "$value_selected" ]; then 
                          
         qubes-prefs --set $property $value_selected; fi;;


     default_kernel)

       local value_selected=`true |\
         dmenu -p "Enter the kernel that is to be used as default"\
         $dmenu_d0`

       if [ -n "$value_selected" ]; then

         local answer_selected=`printf "No\nYes" |\
           dmenu -i -p "Set default kernel to $value_selected?"\
           $dmenu_d0`

         if [ "$answer_selected" = "Yes" ]; then
                            
           qubes-prefs --set $property "$value_selected"
         fi
       fi;;


     default_netvm)

       # List netvm's via 'qvm-ls'.
       local value_selected=`printf "$(qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
         grep '|...N....$' | cut -d '|' -f1)" |\
         dmenu -l 50 -p "Select netvm for $target_qube" $dmenu_d0`

       if [ -n "$value_selected" ]; then 
                          
         qubes-prefs --set $property $value_selected; fi;;


     default_pool)

       local value_selected=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 30 -p "Select default storage pool" \
         $dmenu_d0 | awk '{ print $1 }'`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_pool_kernel)

       local value_selected=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 30 -p "Select default storage pool for kernel volumes" \
         $dmenu_d0 | awk '{ print $1 }'`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_pool_private)

       local value_selected=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 30 -p "Select default storage pool for private volumes" \
         $dmenu_d0 | awk '{ print $1 }'`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_pool_root)

       local value_selected=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 30 -p "Select default storage pool for root volumes" \
         $dmenu_d0 | awk '{ print $1 }'`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_pool_volatile)

       local value_selected=`qvm-pool --list | sed '1d' |\
         dmenu -i -l 30 -p "Select default storage pool for volatile volumes" \
         $dmenu_d0 | awk '{ print $1 }'`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_qrexec_timeout)

       local value_selected=`qubes-prefs --get default_qrexec_timeout |\
         dmenu -p "Enter the time in seconds, after which qrexec connection attempts are deemed a failure"\
         $dmenu_d0`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set default_$property $value_selected; fi;;


     default_shutdown_timeout)

       local value_selected=`qubes-prefs --get default_shutdown_timeout |\
         dmenu -p "Enter the default time in seconds for vm shutdowns to complete"\
         $dmenu_d0`

       if [ -n "$value_selected" ]; then

         qubes-prefs --set $property $value_selected; fi;;


     default_template)

       # List templatevm's via 'qvm-ls'.
       local value_selected=`qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
         grep '|t.......$' | cut -d '|' -f1 |\
         dmenu -l 50 -p "Select default template for" $dmenu_d0`

       if [ -n "$value_selected" ]; then 
                              
         qubes-prefs --set $property $value_selected; fi;;


     management_dispvm)

       if [ -n "${LIST_OF_DISPTEMP}" ]; then unset LIST_OF_DISPTEMP; fi

         # [mediocre] Look up disposable templates.
         for n in `qvm-ls --no-spinner --raw-data -O NAME,FLAGS |\
           grep '|a.......$' | cut -d '|' -f1`; do

           if `qvm-prefs --get $n template_for_dispvms |\
             grep True &>/dev/null`; then

             if [ -z "$LIST_OF_DISPTEMP" ] 
               
               then  LIST_OF_DISPTEMP+=$n
           
               else LIST_OF_DISPTEMP+="\n"$n
             fi
           fi
         done 

         local value_selected=`printf "${LIST_OF_DISPTEMP[*]}" |\
           dmenu -l 50 -p "Select management dispvm"\
           $dmenu_d0`

         if [ -n "$value_selected" ]; then
                          
           qubes-prefs --set $property $value_selected; fi;;


     stats_interval) 

       local value_selected=`true  |\
         dmenu -p "Enter interval in seconds for VM stats reporting" $dmenu_d0`

       if [ -n "$stats_interval" ]; then

         qubes-prefs --set $property $value_selected; fi;; 


     updatevm) 

       # List netvm's via 'qvm-ls'.
       local value_selected=`printf "$(qvm-ls --no-spinner --raw-data --fields NAME,FLAGS |\
         grep '|...N....$' | cut -d '|' -f1)" |\
         dmenu -l 50 -p "Select new UpdateVM" $dmenu_d0`

       if [ -n "$value_selected" ]; then

         if qvm-check --running $value_selected &>/dev/null; then

           qubes-prefs --set $property $value_selected
         else

           echo "Go back..." |\
             dmenu -p "$value_selected needs to be running!"\
             $dmenu_d0 &>/dev/null
         fi
       fi;;


     *)
   esac
 done
}



rearrange_qube_list() {

 qube_list=$(echo "$qube_list" |\
   awk -v ListInOrder="LABEL,purple,blue,gray,green,yellow,orange,red,black" '
   BEGIN {
   split(ListInOrder, a, ",")
   for (i = 1; i <= length(a); ++i) ListToOrdinal[a[i]] = i
   }
   { print ListToOrdinal[$3] "-" $0 }
   ' | sort -t- -k1,1n | cut -d- -f2-)
}


show_qubes=$1

if [ -z "$show_qubes" ]; then

  printf "Error: Please append one of the following: '--all', '--tags=TAG', '--running', '--paused', '--halted' or whatever"

  exit 2

# As of 2019.08.23, 'qvm-ls --all' will not list dom0 because of a bug.
# As a workaround, we will output $1 into a variable
# and unset it when '--all' is used.
elif [ "$show_qubes" = "--all" ]; then

  unset show_qubes
fi

if [ "$2" = "--light-theme" ]; then

  theme_0='#ffffff'
  theme_1='#000000'
else

  theme_0='#000000'
  theme_1='#ffffff'
fi

while true; do
    
  # Load 'qvm-ls' into a variable so that it doesnt 
  # need to reload again after every user operation.
  qube_list=`qvm-ls --no-spinner $show_qubes -O NAME,STATE,LABEL,CLASS\
,TEMPLATE,NETVM,IP,PRIV-MAX,PRIV-CURR,PRIV-USED,ROOT-MAX\
,ROOT-CURR,ROOT-USED,KERNEL,KERNELOPTS`

  rearrange_qube_list

  if [ -n "$target_qube" ]; then unset target_qube; fi 

  # Get out of the while loop and refresh 'qvm-ls' by loading it again
  # into $qube_list, whenever the user selects the 'qvm-ls' top row.
  while [ "$target_qube" != "NAME" ]; do

    target_qube=`echo "$qube_list" | dmenu -f -m 0 -l 69 \
      -nb $theme_0 -nf $theme_1 -sb $theme_1 -sf $theme_0 |\
      awk '{ print $1 }'`

    if [ -z "$target_qube" ]; then exit 1

    elif [ "$target_qube" != "NAME" ]; then

      if [ "$target_qube" = "dom0" ]; then

        dmenu_d0="-f -m 0 -nb #d3d3d3 -nf #000000 -sb #ffffff -sf #000000"

        fdom0_preferences
      else

        qube_label=`echo "$qube_list" | awk '{ print $1,$3 }' |\
          grep -w $target_qube | awk '{ print $2 }'`

        correct_qube_label
            
        # Note that the '-m 0' option in 'dmenu' is important
        # for security, as it restricts it to monitor 0.
        dmenu_fmc="-f -m 0 -nb $theme_0 -nf $theme_1 -sb $qube_label -sf $theme_1"

        chosefrom=0

        while [ -n "$chosefrom" ]; do
            
          chosefrom=`printf "Applications\nAudio input\nBlock devices\nBoot\nBootfrom\nClone\nCommand\nDisk\nFirewall\nGUI\nKeyboard\nKill\nPause\nPCI\nPreferences\nReboot\nRemove\nServices\nShutdown\nUnpause\nUSB" |\
                             dmenu -l 21 -i -p "$target_qube:" $dmenu_fmc |\
                             awk '{ print $1 }'`

          case $chosefrom in

            Applications) 
            
              fqvm_applications;;

            Audio)

              fqvm_devices;;

            Block)

              fqvm_devices;;
                
            Boot) 
            
              qvm-start --skip-if-running $target_qube&;; 
            
            Bootfrom) 
            
              qubes-vm-boot-from-device $target_qube;;
                    
            Clone) 
            
              fqvm_clone;;

            Command) 
            
              fqvm_run;;
                
            Disk) 
            
              fqvm_disk;;
                   
            Firewall) 
            
              fqvm_firewall;;
                    
            GUI) 
            
              qubes-vm-settings $target_qube;;

            Keyboard) 
            
              fqvm_keyboard;;
                    
            Kill) 
            
              answer=`printf "No\nYes" |\
                dmenu -i -p "Kill $target_qube?" $dmenu_fmc`
                         
              if [ "$answer" = "Yes" ]; then 
                       
                qvm-kill $target_qube& fi;;
                    
            
            Pause) 
            
              answer=`printf "No\nYes" |\
                dmenu -i -p "Pause $target_qube?" $dmenu_fmc`
                         
              if [ "$answer" = "Yes" ]; then
                
                qvm-pause $target_qube& fi;;

            
            PCI) 
            
              fqvm_pci;;
                     
            Preferences) 
            
              fqvm_preferences;; 

            Reboot) 
            
              answer=`printf "No\nYes" |\
                dmenu -i -p "Reboot $target_qube?" $dmenu_fmc`
                         
              if [ "$answer" = "Yes" ]; then
               
                if qvm-check --running $target_qube &>/dev/null; then 

                  $(qvm-shutdown --wait $target_qube && qvm-start $target_qube)&
                fi
              fi;;
             
            
            Remove) 
            
              fqvm_remove;;  

            Services) 
            
              fqvm_service;;

            Shutdown) 
            
              answer=`printf "No\nYes" |\
                dmenu -i -p "Shutdown $target_qube?" $dmenu_fmc`
                         
              if [ "$answer" = "Yes" ]; then
             
                qvm-shutdown $target_qube& fi;;     

            
            Unpause) 
            
              qvm-unpause $target_qube&;;

            USB) 
            
              fqvm_devices;;

            *)
          esac
        done
      fi
    fi
  done
done
